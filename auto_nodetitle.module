<?php
// $Id$

/**
 * @file
 * Allows hiding of the node title field and automatic title creation
 */

/**
 * Implementation of hook_perm()
 */
function auto_nodetitle_perm() {
  return array('use PHP for title patterns');
}

/**
 * Implementation of hook_form_alter().
 */
function auto_nodetitle_form_alter($form_id, &$form) {

  if (isset($form['#node_type']) && 'node_type_form' == $form_id) {
    auto_nodetitle_node_settings_form($form);
  }
  else if (isset($form['#node']) && $form['#node']->type .'_node_form' == $form_id) {
    //this is a node form    
    if (variable_get('ant_'. $form['#node']->type, 0)) {
      $types = node_get_types();
      $pattern = variable_get('ant_pattern_'. $form['#node']->type, '');
      if (trim($pattern)) {
        // the $form['#node'] is not complete yet, so we merge it with the post info
        $node = (object)array_merge((array)$form['#node'], $form['#post']);
        $title = _auto_nodetitle_patternprocessor($pattern, $node);
      }
      else if ($form['#node']->nid) {
        $title = t('@type @node-id', array('@type' => $types[$form['#node']->type]->name, '@node-id' => $form['#node']->nid));
      }
      else {
        $title = t('@type', array('@type' => $types[$form['#node']->type]->name));
      }
      // by doing this, the node validation can still check to see that the field isn't empty
      $form['title']['#value'] = $title;
      $form['title']['#type'] = 'value';
      $form['title']['#required'] = FALSE;
      $form['#validate']['auto_nodetitle_validate'] = array();
    }
  }
}

/**
 * Validation function for node form
 */
function auto_nodetitle_validate($form_id, $form_values, $form) {
  // there could be a setting for allowing empty node titles, but we haven't implemented that
  if (!trim($form_values['title'])  && !variable_get('ant_emptyok_'. $form['#node']->type, 0)) {
    $message = t('Autogenerated title field is blank.');
    if (user_access('administer nodes')) {
      $message .= ' '. t('Perhaps you need to change the <a href="@url">configuration settings</a> for this content type.', array('@url' => 'admin/content/types/'. $form['#node']->type));
    }
    form_set_error('title', $message);
  }
} 


/**
  * Helper function for hook_form_alter() renders the settings per node-type.
  * @TODO: a re-evaluate PHP pattern on edit? option.
  */
function auto_nodetitle_node_settings_form(&$form) {
  $form['auto_nodetitle'] = array(
    '#type' => 'fieldset',
    '#title' => t('Automatic title generation'),
    '#weight' => 0,
  );
  $form['auto_nodetitle']['ant'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automatically generate the node title and hide the node title field.'),
    '#default_value' => variable_get('ant_'. $form['#node_type']->type, 0),
  );

  if (module_exists('token') || user_access('use PHP for title patterns')) {
    $form['auto_nodetitle']['ant_pattern'] = array(
      '#type' => 'textarea',
      '#title' => t('Pattern for the title'),
      '#description' => t('Leave blank for using the per default generated title. Otherwise this string will be used as title.'),
      '#default_value' => variable_get('ant_pattern_'. $form['#node_type']->type, ''),
    );
  }
  
  if (module_exists('token')) {
    $form['auto_nodetitle']['token_help'] = array(
      '#title' => t('Replacement patterns'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['auto_nodetitle']['token_help']['help'] = array(
      '#value' => theme('token_help', 'node'),
    );
  }
  if (user_access('use PHP for title patterns')) {
    $form['auto_nodetitle']['ant_php'] = array(
      '#type' => 'checkbox',
      '#title' => t('Evaluate PHP in pattern.'),
      '#description' => t('Put PHP code above that prints your string, but make sure you surround code in &lt;?php and ?&gt;'),
      '#default_value' => variable_get('ant_php_'. $form['#node_type']->type, ''),
    );
  }
  else {
    // if user doesn't have PHP permission, their submission will reset PHP evaluation
    $form['auto_nodetitle']['auto_nodetitle_php'] = array(
      '#type' => 'value',
      '#value' => 0,
    );
  }
}


/**
  * Helper function to generate the title according to the PHP code.
  * Right now its only a wrapper, but if this is to be expanded, here is the place to be.
  * @return a title string
  */
function _auto_nodetitle_patternprocessor($output, $node) {
  if (module_exists('token')) {
    $output = token_replace($output, 'node', $node);
  }
  if (variable_get('ant_php_'. $node->type, 0)) {
    $output = drupal_eval($output);
  }
  return $output;
}
